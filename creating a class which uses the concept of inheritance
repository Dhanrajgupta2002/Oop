Exp 3 :Imagine a publishing company which does marketing for book and
audio cassette versions. Create a class publication that stores the title
(a string) and price (type float) of publications. From this class derive
two classes: book which adds a page count (type int) and tape which
adds a playing time in minutes (type float).
Write a program that instantiates the book and tape class, allows user
to enter data and displays the data members. If an exception is
caught, replace all the data member values with zero values.


#include <iostream>
#include <string>
using namespace std;

class Publication {
private:
    string title;
    float price;

public:
    Publication() {
        this->title = "";
        this->price = 0.0;
    }

    void getData() {
        cout << "Enter title: ";
        cin.ignore(); // Ignore newline character in buffer
        getline(cin, title);
        cout << "Enter price: ";
        cin >> price;
    }

    void display() {
        cout << "\n";
        cout << "Title: " << title << endl;
        cout << "Price: Rs." << price << endl;
    }
};

class Book : public Publication {
private:
    int page_count;

public:
    Book() {
        this->page_count = 0;
    }

    void getData() {
        Publication::getData();
        cout << "Enter page count: ";
        cin >> page_count;
    }

    void display() {
        Publication::display();
        cout << "Page Count: " << page_count << endl;
        cout << "\n";
    }
};

class Tape : public Publication {
private:
    float time;

public:
    Tape() {
        this->time = 0.0;
    }

    void getData() {
        Publication::getData();
        cout << "Enter time: ";
        cin >> time;
    }

    void display() {
        Publication::display();
        cout << "Time: " << time << endl;
        cout << "\n";
    }
};

int main() {
    Book book;
    Tape tape;

    try {
        cout << "Enter book details: \n";
        book.getData();

        cout << "Enter tape details: \n";
        tape.getData();

        cout << "Book details: \n";
        book.display();

        cout << "Tape details: \n";
        tape.display();
    } catch (const exception& e) {
        cerr << e.what() << '\n';
    }

    return 0;
}
