#include <iostream>
using namespace std;
class Complex
{p
rivate:
double real;
double img;
public:
Complex()
{t
his->real = 0;
this->img = 0;
}C
omplex(double real, double img)
{t
his->real = real;
this->img = img;
}C
omplex operator+(const Complex &other)
{r
eturn Complex(real + other.real, img + other.img);
}C
omplex operator*(const Complex &other)
{d
ouble res_real = (real * other.real) - (img * other.img);
double res_img = (real * other.img) + (img * other.real);
return Complex(res_real, res_img);
}f
riend ostream &operator<<(ostream &out, Complex &complex)
{c
out << complex.real;
if (complex.img >= 0)
{o
ut << " + " << complex.img << "i";
}e
lse
{o
ut << " - " << -complex.img << "i";
}r
eturn out;
}f
riend istream &operator>>(istream &in, Complex &complex)
{c
out << "Enter real part: ";
in >> complex.real;
cout << "Enter imaginary part: ";
in >> complex.img;
return in;
}}
;
int main()
{C
omplex c1, c2;
cout << "Enter first complex number: \n";
cin >> c1;
cout << "Enter second complex number: \n";
cin >> c2;
Complex sum = c1 + c2;
Complex product = c1 * c2;
cout << "Sum: " << sum << endl;
cout << "Product: " << product << endl;
return 0;
}
